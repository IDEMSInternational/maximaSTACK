/**
 * Get the constant term of the given expression depending on the variables
 * in varvec
 *
 * @param[expression] expr
 * @param[matrix] varvec A 3x1 matrix with the coordinate variables, e.g. matrix([x], [y], [z])
 * @return[constant] Constant term within the expression
 */
constant_term(expr, [varvec]) := block([],
  varvec: if emptyp(varvec) then matrix([x],[y],[z]) else first(varvec),
  return(subst(makelist(varvec[i,1]=0, i, length(varvec)), expr))
);

/**
 * Take the vector representation of a 3D plane (point with spanning vectors)
 * and return its Cartesian equation.
 *
 * @param[matrix] P A 3x1 matrix representing a point the plane passes though
 * @param[matrix] v1 A 3x1 matrix representing the first spanning vector
 * @param[matrix] v2 A 3x1 matrix representing the second spanning vector
 * @param[matrix] varvec A 3x1 matrix with the coordinate variables, e.g. matrix([x], [y], [z])
 * @return[equation] The cartesian equation of the plane
 */
plane_vec_to_cartesian(P, v1, v2, [varvec]):= block([eqn_root, d],
    varvec: if emptyp(varvec) then matrix([x],[y],[z]) else first(varvec),
    eqn_root: expand(determinant(addcol(varvec-P, v1, v2))),
    d: -constant_term(lhs(eqn_root)),
    return(eqn_root+d=d)
);

/**
 * Take the vector representation of a 3D line (point with spanning vector)
 * and return its Cartesian equations.
 *
 * @param[matrix] P A 3x1 matrix representing a point the plane passes though
 * @param[matrix] v1 A 3x1 matrix representing the first spanning vector
 * @param[matrix] varvec A 3x1 matrix with the coordinate variables, e.g. matrix([x], [y], [z])
 * @return[list] List of two coordinate equations defining the line
 */
line_vec_to_cartesian(P, v1, [varvec]):=block([i, eqns, vars, lhs1, lhs2, d1, d2],
    varvec: if emptyp(varvec) then matrix([x],[y],[z]) else first(varvec),
    i: if v1[1,1] # 0 then 1 else (if v1[2,1] # 0 then 2 else 3),
    eqns: ev(P+t*v1, t=(varvec[i,1]-P[i,1])/v1[i,1]),
    eqns: submatrix(i, eqns),
    vars: submatrix(i, varvec),
    lhs1: expand(vars[1,1] - eqns[1,1]),
    lhs2: expand(vars[2,1] - eqns[2,1]),
    d1: -constant_term(lhs1),
    d2: -constant_term(lhs2),
    return([lhs1 + d1 = d1, lhs2 + d2 = d2])
);

/**
 * Normal vector relative to two given vectors.
 *
 * @param[matrix] v1 A 3x1 matrix representing the first spanning vector
 * @param[matrix] v2 A 3x1 matrix representing the second spanning vector
 * @return[matrix] A 3x1 matrix that is a normal vector to v1 and v2
 */
normal_vec(v1, v2):=determinant(addcol(
        matrix([matrix([1],[0],[0])],[matrix([0],[1],[0])],[matrix([0],[0],[1])]), 
        v1, 
        v2)
);

/**
 * Given the cartesian equation of a plane, get the normal vector.
 *
 * @param[equation] eqn The cartesian equation of the plane
 * @param[matrix] varvec (optional) A 3x1 matrix with the list of variables. By default, x, y, and z.
 * @return[matrix] A 3x1 matrix that is a normal vector for the plane
 */
normal_from_plane_cartesian(eqn,[varvec]):= block([expr],
  varvec: if emptyp(varvec) then matrix([x],[y],[z]) else first(varvec),
  expr: lhs(eqn)-rhs(eqn),
  return(matrix([coeff(expr, varvec[1,1])],[coeff(expr, varvec[2,1])],[coeff(expr, varvec[3,1])]))
);

/**
 * Given a 3D vector n, find two linearly independent vectors orthogonal to it.
 * In particular, if n is the normal vector of a plane, this function returns
 * two spanning vectors of the plane.
 *
 * @param[matrix] n A 3x1 matrix.
 * @return[list] A list of two 3x1 matrices that are vectors orthogonal to n
 */
spanning_from_normal(n) := block([varvec, sol, rparams, exprs, v1, v2],
  varvec: matrix([x],[y],[z]),
  vars: list_matrix_entries(varvec),
  sol: linsolve(transpose(n).varvec=0, vars),
  rparams: listify(setdifference(setify(listofvars(sol)), setify(vars))),
  exprs: map(lambda([x], expand(rhs(x))), sol),
  v1: transpose(matrix(coeff(exprs, rparams[1]))),
  v2: transpose(matrix(coeff(exprs, rparams[2]))),
  return([v1,v2])
);

/**
 * Does the given vector satisfy the equation?
 *
 * @param[equation] eqn
 * @param[matrix] vec A 3x1 matrix
 * @param[matrix] varvec A 3x1 matrix with the coordinate variables, e.g. matrix([x], [y], [z])
 * @return[boolean] true if the vectors satisfies the equation
 */
satisfies_equation(eqn, vec, [varvec]) := block([],
  varvec: if emptyp(varvec) then matrix([x],[y],[z]) else first(varvec),
  return(is(subst(makelist(varvec[i,1]=vec[i,1], i, length(varvec)), eqn)))
);

/**
 * Get the constant term of the given expression and the coefficient for each
 * variable appearing in the input. Assumes that the input is linear in its
 * variables. The input may be a matrix.
 *
 * A particular use case is obtaining basis vectors from a parametric plane or
 * line equation.
 *
 * In case the input is not linear, returns [matrix([null]), [], vars] where
 * vars is the list of variables appearing in the expression.
 *
 * @param[expression] vec
 * @param[list] exclude_params List of variable names to consider constant
 * @return[list] A list with three elements:
 *     The constant term within the expression
 *     A list of coefficient terms for each variable in the expression
 *     A list of variables in the expression
 *
 * Examples. Let vec: matrix([t+3*s-4],[2*t+5]). Then: 
 *
 * >>> vectors_from_parametric(vec)
 * [
 *   matrix([-4],[5]),
 *   [matrix([3],[0]),matrix([1],[2])],
 *   [s,t]
 * ]
 * 
 * >>> vectors_from_parametric(vec, [s])
 * [
 *   matrix([3*s-4],[5]),
 *   [matrix([1],[2])],
 *   [t]
 * ]
 */
vectors_from_parametric(vec, [exclude_params]):=block([is_linear, param_vects, base_vect],
  vec: expand(vec),
  if not emptyp(exclude_params) then exclude_params: first(exclude_params),
  vars: listify(setdifference(setify(listofvars(vec)), setify(exclude_params))),
  is_linear: every(lambda([var], is(length(listofvars(diff(vec, var)))=0)), vars),
  if not is_linear then return([matrix([null]), [], vars]),
  param_vects: makelist(coeff(vec, var), var, vars),
  base_vect: constant_term(vec, transpose(matrix(vars))),
  return([base_vect, param_vects, vars])
);
