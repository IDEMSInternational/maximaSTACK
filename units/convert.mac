/* This library depends on vectors.mac */

/**
 * Try to convert object to a column vector.
 * Supported objects include:
 * * Mx1 matrices
 * * Vectors using c notation
 * * Flat lists, ntuples (with entries interpreted as a column vector entries)
 * * TODO: Check that list is, indeed, flat.
 * If conversion is not possible, return matrix()
 *
 * @param[ex] ex 
 * @return[matrix] A Mx1 matrix representing the column vector, or matrix() if input was invalid
 */
convert_to_colvec(ex):= block([op1],
  ex: vec_convert(ex),
  if col_vecp(ex) then return(ex),
  if vectorp(ex) then return(matrix()),
  op1: safe_op(ex),
  if member(op1,["[","ntuple"]) then return(transpose(apply(matrix,[ex]))),
  return(matrix())
);

 /**
 * Takes a collection of vectors and return the matrix that has those vectors as columns.
 * If the input is already a matrix, the matrix itself is returned.
 * If the input in invalid, matrix() is returned.
 * The rationale is that further operations can still be performed on the output without
 * crashing in the feedback variables, and we can catch this case in the first PRT node.
 * The vectors themselves may be different objects. Supported objects include:
 * * Mx1 matrices
 * * Vectors using c notation
 * * Lists, ntuples (representing a column vector)
 * The collection may be a list, set, ntuple, span, or matrix
 * If given a matrix, then returns the columns as a list, with each column also being a list.
 *
 * @param[] ex A list, set, ntuple or span containing vectors as matrices, lists, c, r, sets or ntuples, or a matrix
 * @return[matrix] A matrix containing the input elements as columns, or matrix() in case of invalid input.
 */
cols_to_matrix(L):=block([op1, colmat],
  if matrixp(L) then return(L),
  op1: safe_op(L),
  if not(member(op1,["[","ntuple","{","span"])) then return(matrix()),
  L: map(lambda([elem],convert_to_colvec(elem)),L),
/*  if is(cardinality(setify(map(length,L))) # 1) then return(matrix()),*/
  colmat: errcatch(ev(apply(addcol, L), simp)),
  if emptyp(colmat) then return(matrix()) else first(colmat)
);

 /**
 * Takes a matrix and returns a list of its column vectors.
 *
 * @param[matrix] M 
 * @return[list] List of Mx1 matrices (column vectors)
 */
matrix_to_cols(M):= makelist(col(M, i), i, 1, second(matrix_size(M)));

 /**
 * Are the columns of this matrix linearly independent?
 *
 * @param[matrix] M
 * @return[boolean] 
 */
lin_ind_colsp(M):= is(rank(M)#0 and rank(M)=second(matrix_size(M)));

 /**
 * Is the column space of M1 and M2 the same?
 *
 * @param[matrix] M1
 * @param[matrix] M2
 * @return[boolean] 
 */
same_colspacep(M1,M2):=block([combined, rank_combined],
    if length(M1) # length(M2) then return(false),
    combined: errcatch(addcol(M1,M2)),
    if emptyp(combined) then return(false),
    rank_combined: rank(first(combined)),
    is(rank(M1)=rank_combined and rank(M2)=rank_combined)
);
