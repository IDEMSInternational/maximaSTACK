/* This library depends on matrices.mac */

/* Functions related to custom scalar products */

/**
 * Compute the orthogonal projection of v onto u with respect to scalar product sp.
 *
 * @param[matrix] u a mx1 matrix
 * @param[matrix] v a mx1 matrix
 * @param[function] sp A bilinear form, i.e. a function mapping pairs of vectors to scalars
 * @return[vector] Orthogonal projection of v onto u
 */
proj(u, v, [sp]) := block(
    sp: if emptyp(sp) then "." else first(sp),
    return(sp(v,u)/sp(u,u)*u)
);

/**
 * Orthogonalize column vectors  with respect to a scalar product sp
 *
 * @param[matrix] L a mxn matrix or list of column vectors, see cols_to_matrix
 * @param[function] sp A bilinear form, i.e. a function mapping pairs of vectors to scalars
 * @return[matrix] An mxn matrix or list of column vectors with the same
 *                 column space as L and orthogonal columns with respect to sp
 */
orthogonalize(L, [sp]) := block([M, Morth],
    sp: if emptyp(sp) then "." else first(sp),
    M: cols_to_matrix(L),
    if L = matrix([null]) then return(error("Malformed input. Expecting matrix or column vectors.")),
    Morth: transpose(apply(matrix, gramschmidt(transpose(M), sp))),
    return(if matrixp(M) then Morth else matrix_to_cols(Morth))
);

/**
 * Normalize column vectors with respect to a scalar product sp
 *
 * @param[matrix] L a mxn matrix or list of column vectors, see cols_to_matrix
 * @param[function] sp A bilinear form, i.e. a function mapping pairs of vectors to scalars
 * @return[matrix] An mxn matrix or list of column vectors with the columns
 *                 of L normalized with respect to sp
 */
normalize(M, [sp]) := block([L],
    sp: if emptyp(sp) then "." else first(sp),
    L: cols_to_cols(M),
    if L = matrix([null]) then return(error("Malformed input. Expecting matrix or column vectors.")),
    L: map(lambda([v], ev(v/sqrt(sp(v,v)), simp)), L),
    if matrixp(M) then return(apply(addcol, L)) else return(L)
);

/* Helper function for orthogonal_columnsp and orthonormal_columnsp */
_orthogonal_check_matrix(M, [sp]):= block([dim],
    if emptyp(sp) then return(ev(transpose(M).M, expand, simp)),
    sp: first(sp),
    if not matrixp(sp) then ( /* Get matrix form from scalar product */
        dim: length(M),
        sp: genmatrix(lambda([i, j], sp(col(ident(dim), i), col(ident(dim), j))), dim, dim)
    ),
    return(ev(transpose(M).sp.M, expand, ratsimp, simp))
);

/** 
 * Does the given matrix/list have orthogonal columns with respect to sp?
 * Returns false in case of malformed input.
 *
 * @param[matrix] L A mxn matrix or list of column vectors, see cols_to_matrix
 * @param[matrix] sp A scalar product or a symmetric positive definite matrix S representing a scalar product sp(u, v) := u^T.S.v
 * @return[boolean] Does L have orthogonal columns with respect to sp?
 */
orthogonal_columnsp(L, [sp]):= block([dim],
    M: cols_to_matrix(L),
    if M = matrix([null]) then return(false),
    checkmat: if emptyp(sp) then _orthogonal_check_matrix(M) else _orthogonal_check_matrix(M, first(sp)),
    return(diagp(checkmat))
);

/** 
 * Does the given matrix/list have orthonormal columns with respect to sp?
 * Returns false in case of malformed input.
 *
 * @param[matrix] L A mxn matrix or list of column vectors, see cols_to_matrix
 * @param[matrix] sp A scalar product or a symmetric positive definite matrix S representing a scalar product sp(u, v) := u^T.S.v
 * @return[boolean] Does L have orthonormal columns with respect to sp?
 */
orthonormal_columnsp(L, [sp]):= block([dim],
    M: cols_to_matrix(L),
    if M = matrix([null]) then return(false),
    checkmat: if emptyp(sp) then _orthogonal_check_matrix(M) else _orthogonal_check_matrix(M, first(sp)),
    return(is(checkmat = ident(second(matrix_size(M)))))
);
