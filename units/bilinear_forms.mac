/* This library depends on matrices.mac */

/* Functions related to custom scalar products */

/**
 * Compute the orthogonal projection of v onto u with respect to scalar product sp.
 *
 * @param[matrix] u a mx1 matrix
 * @param[matrix] v a mx1 matrix
 * @param[function] sp A bilinear form, i.e. a function mapping pairs of vectors to scalars
 * @return[vector] Orthogonal projection of v onto u
 */
proj(u, v, [sp]) := block(
    sp: if emptyp(sp) then "." else first(sp),
    return(sp(v,u)/sp(u,u)*u)
);

/**
 * Orthogonalize the columns of a matrix with respect to a scalar product sp
 *
 * @param[matrix] M a mxn matrix or list of column vectors
 * @param[function] sp A bilinear form, i.e. a function mapping pairs of vectors to scalars
 * @return[matrix] An mxn matrix or list of column vectors with the same
 *                 column space as M and orthogonal columns with respect to sp
 */
orthogonalize(M, [sp]) := block([],
    sp: if emptyp(sp) then "." else first(sp),
    if matrixp(M) then return(transpose(apply(matrix, gramschmidt(transpose(M), sp)))),
    return(gramschmidt(M, sp))
);

/**
 * Normalize the columns of a matrix with respect to a scalar product sp
 *
 * @param[matrix] M a mxn matrix or list of column vectors
 * @param[function] sp A bilinear form, i.e. a function mapping pairs of vectors to scalars
 * @return[matrix] An mxn matrix or list of column vectors with the columns
 *                 of M normalized with respect to sp
 */
normalize(M, [sp]) := block([L],
    sp: if emptyp(sp) then "." else first(sp),
    L: if matrixp(M) then makelist(col(M,i), i, second(matrix_size(M))) else M,
    L: map(lambda([v], ev(v/sqrt(sp(v,v)), simp)), L),
    if matrixp(M) then return(apply(addcol, L)) else return(L)
);

/** 
 * Does the given matrix have orthogonal columns with respect to spMat?
 *
 * @param[matrix] M a matrix
 * @param[matrix] spMat a symmetric positive definite matrix representing a scalar product sp(u, v) := u^T.spMat.v
 * @return[boolean] Does M have orthogonal columns with respect to spMat?
 */
orthogonal_columns_spp(M, spMat):= diagp(ev(expand(transpose(M).spMat.M),simp));

/** 
 * Does the given matrix have orthonormal columns with respect to spMat?
 *
 * @param[matrix] M a matrix
 * @param[matrix] spMat a symmetric positive definite matrix representing a scalar product sp(u, v) := u^T.spMat.v
 * @return[boolean] Does M have orthonormal columns with respect to spMat?
 */
orthonormal_columns_spp(M, spMat):= if matrixp(M) then is(ev(expand(transpose(M).spMat.M),simp) = ident(second(matrix_size(M)))) else false;
